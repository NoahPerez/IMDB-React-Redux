{"version":3,"sources":["apiKey.js","components/layout/spinner/spinner.gif","components/layout/navbar/navBar.component.jsx","components/layout/footer/footer.component.jsx","components/layout/spinner/spinner.component.jsx","redux/actions/search-actions.js","redux/actions/types.js","components/homepage/search-from.component.jsx","components/homepage/movie-card.component.jsx","components/homepage/movies-container.component.jsx","components/homepage/landing.component.jsx","components/homepage/movie-single.component.jsx","redux/reducers/search-reducer.js","redux/reducers/index.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","APIKey","NavBar","className","to","id","Footer","href","target","rel","Spinner","src","spinner","style","width","margin","display","alt","setLoading","type","SearchFrom","onChange","e","props","searchMovie","value","onSubmit","preventDefault","fetchMovies","text","this","name","placeholder","React","Component","connect","state","movies","dispatch","payload","axios","get","then","response","data","catch","err","console","log","MovieCard","movie","Poster","Title","Year","imdbID","MoviesContainer","content","Response","Search","map","index","key","loading","MovieSingle","fetchMovie","match","params","movieInfo","Plot","Genre","Released","Runtime","Language","Country","Rated","imdbRating","Director","Writer","Actors","Production","BoxOffice","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","applyMiddleware","App","exact","path","component","Landing","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8444b128.chunk.js","sourcesContent":["module.exports = {\n    APIKey: '5926a6d9'\n};\n","module.exports = __webpack_public_path__ + \"static/media/spinner.e26d873e.gif\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => (\n\n    <div>\n        <nav className=\"navbar navbar-light bg-dark mb-5\">\n            <div className=\"container\">\n                <div className=\"navbar-header\">\n                    <Link className=\"navbar-brand text-white text-lg brand-text\" to=\"/\">\n                        Movie Info\n            </Link>\n                </div>\n                <ul className=\"navbar-nav ml-auto text-light d-inline-block\">\n                    <li className=\"nav-item d-inline-block mr-4\">\n                        <i className=\"fab fa-imdb fa-3x\" id=\"imdb-logo\" />\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    </div>\n);\n\n\nexport default NavBar;","import React from 'react';\n\nconst Footer = () => (\n\n    <div>\n        <div className=\"row\">\n            <div className=\"col-md-12\">\n                <div className=\"footer p-3 mt-4 text-center bg-dark text-light\">\n                    Developed By:\n            <span className=\"text-warning font-weight-normal\"> Noah Perez </span>\n            , Using <i className=\"fab fa-react\" /> React JS &amp; Redux JS\n            integrated with external movies data API\n            <a\n                        href=\"http://www.omdbapi.com/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    > OMDB\n            </a>\n                </div>\n            </div>\n        </div>\n    </div>\n)\n\n\nexport default Footer;\n","import React from 'react';\nimport spinner from './spinner.gif';\n\nconst Spinner = () => {\n    return (\n        <div>\n            <img\n                src={spinner}\n                style={{ width: '200px', margin: 'auto', display: 'block' }}\n                alt=\"Loading...\"\n            />\n        </div>\n    )\n}\n\nexport default Spinner;\n\n","//Actions are functions a type and payload and we import them \n// ex:  when we click on the search box that will initialize an action which is the search movie or fetch movies that will be the action will be trigged after we hit enter \n// so we here in actions we create a function which will call the API and then fetch the data and getting get me the data so the data will be passed into from the action into their Reducer and there \n// in the reducer will check the action type if it is movie. Fetch movie that the action types so it will set the movies state into the action payload.\nimport { SEARCH_MOVIE, FETCH_MOVIES, FETCH_MOVIE, SET_LOADING } from './types';\nimport axios from 'axios';\nimport { APIKey } from '../../apiKey';\n\n// dispatch is coming from our middleware \n// in dispatch we are dispatch action type and payload, that will make the reducer recognize our action\nexport const searchMovie = text => dispatch => {\n    dispatch({\n        type: SEARCH_MOVIE,\n        payload: text\n    });\n};\n\nexport const fetchMovies = text => dispatch => {\n    //in order to use your variable inside your string you need to make a template variable\n    axios\n        .get(`http://www.omdbapi.com/?apikey=${APIKey}&s=${text}`)\n        .then(response => dispatch({\n            type: FETCH_MOVIES, //folder types.js also imported \n            payload: response.data // Search only to get the Search Object  //response will be our response that contains our data\n        })\n        )\n        .catch(err => console.log(err))\n};\n\nexport const fetchMovie = id => dispatch => {\n    //in order to use your variable inside your string you need to make a template variable\n    axios\n        .get(`http://www.omdbapi.com/?apikey=${APIKey}&i=${id}`)\n        .then(response =>\n            dispatch({\n                type: FETCH_MOVIE, //folder types.js also imported \n                payload: response.data // Search only to get the Search Object  //response will be our response that contains our data\n            })\n        )\n        .catch(err => console.log(err))\n};\n\nexport const setLoading = () => {\n    return {\n        type: SET_LOADING,\n    }\n};\n\n\n\n\n","export const SEARCH_MOVIE = 'SEARCH_MOVIE';\nexport const FETCH_MOVIES = 'FETCH_MOVIES';\nexport const FETCH_MOVIE = 'FETCH_MOVIE';\nexport const SET_LOADING = 'SET_LOADING';","import React from 'react'\nimport { searchMovie, fetchMovies, setLoading } from '../../redux/actions/search-actions';\nimport { connect } from 'react-redux'; // in order to use state when you have redux you need connect \n\n\n\n\nclass SearchFrom extends React.Component {\n    //we save the text, the input value into the text state so we can call the state here*\n    onChange = e => {\n        this.props.searchMovie(e.target.value);\n    };\n\n    // when we click it will fire this.props.fetchMovies well the actions \n    onSubmit = e => {\n        e.preventDefault();\n        this.props.fetchMovies(this.props.text); //* we can call the state from here \n        this.props.setLoading();\n    };\n\n    render() {\n        return (\n            <div className=\"jumbotron jumbotron-fluid mt-5 text-center\">\n                <div className=\"container\">\n                    <h1 className=\"display-4 mb-3\">\n                        <i className=\"fa fa-search\" /> Search for a movie ,TV series ..\n          </h1>\n                    <form id=\"searchForm\" onSubmit={this.onSubmit}>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"searchText\"\n                            placeholder=\"Search Movies, TV Series ...\"\n                            onChange={this.onChange}\n                        />\n                        <button type=\"submit\" className=\"btn btn-primary btn-bg mt-3\">\n                            Search\n            </button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({ //*\n    // we need text from movies dot text \n    //The state is the global State object that contains all the states in our application \n    // movies is inside folder reducer index.js we have a movie:searchReducer that contains all our reducers so this is the movies object which contains all the searchReducer.js States \n    // the searchReducer.js contains States  that are initialStates but here we are only using text\n    // text is pull out from here *\n    text: state.movies.text\n})\n\n\n\nexport default connect(mapStateToProps, { searchMovie, fetchMovies, setLoading })(SearchFrom);\n","import React from 'react'\nimport { Link } from 'react-router-dom';\n\nexport class MovieCard extends React.Component {\n    render() {\n\n        const { movie } = this.props;\n        return (\n            <div className=\"col-xs-12 col-md-4 col-lg-3 mb-5\">\n                <div className=\"card card-body bg-dark text-center h-100\">\n                    <img className=\"w-100 mb-2\" src={movie.Poster} alt=\"Movie Cover\" />\n                    <h5 className=\"text-light card-title\">\n                        {movie.Title} - {movie.Year}\n                    </h5>\n\n                    <Link className=\"btn btn-primary\" to={'/movie/' + movie.imdbID}>\n                        Movie Details <i className=\"fas fa-chevron-right\" />\n                    </Link>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MovieCard;\n","import React from 'react'\n\nimport { connect } from 'react-redux';\n\nimport MovieCard from './movie-card.component';\n\nclass MoviesContainer extends React.Component {\n    render() {\n        const { movies } = this.props; //movies is a array \n        let content = '';\n\n        // map is iterating thought the item of the array and give us the index of the item \n        // we are passing movies.map((movie, index)) => to <MovieCard>\n        content = movies.Response === \"True\"\n            ? movies.Search.map((movie, index) => <MovieCard key={index} movie={movie} />)\n            : null;\n\n        return (\n            <div className=\"row\">{content}</div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    movies: state.movies.movies\n})\n\nexport default connect(mapStateToProps)(MoviesContainer);","import React from 'react';\n\nimport { connect } from 'react-redux';\n\nimport Spinner from '../layout/spinner/spinner.component';\nimport SearchFrom from './search-from.component';\nimport MoviesContainer from './movies-container.component';\n\nconst Landing = ({ loading }) => (\n    // const { loading } = this.props; \n    <div className=\"container\">\n        <SearchFrom />\n        {loading ? <Spinner /> : <MoviesContainer />}\n    </div>\n\n)\n\n\nconst mapStateToProps = state => ({\n    loading: state.movies.loading\n})\n\nexport default connect(mapStateToProps)(Landing);\n\n\n\n// import React, { Component } from 'react';\n\n// import { connect } from 'react-redux';\n\n// import SearchForm from './SearchForm';\n// import MoviesContainer from './MoviesContainer';\n// import Spinner from '../layout/Spinner';\n\n// export class Landing extends Component {\n//   render() {\n//     const { loading } = this.props;\n//     return (\n//       <div className=\"container\">\n//         <SearchForm />\n//         {loading ? <Spinner /> : <MoviesContainer />}\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => ({\n//   loading: state.movies.loading\n// });\n\n// export default connect(mapStateToProps)(Landing);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/spinner/spinner.component';\nimport { fetchMovie, setLoading } from '../../redux/actions/search-actions';\nimport { Link } from 'react-router-dom';\n\nclass MovieSingle extends React.Component {\n    componentDidMount() {\n        //The match() method searches a string for a match against a regular expression, and returns the matches, as an Array object.\n        this.props.fetchMovie(this.props.match.params.id)\n        this.props.setLoading();\n    }\n    render() {\n        const { loading, movie } = this.props;\n\n        let movieInfo = (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-xs-12 col-md-4 col-lg-12 card card-body \">\n                        <img src={movie.Poster} className=\"thumbnail\" alt=\"Poster\" />\n                        <hr />\n                        <h3>About </h3>\n                        {movie.Plot}\n                    </div>\n                    <div className=\"col-xs-12 col-md-8 col-lg-12\">\n                        <h2 className=\"mb-3\">{movie.Title}</h2>\n                        <ul className=\"list-group\">\n                            <li className=\"list-group-item\">\n                                <strong>Genre:</strong> {movie.Genre}\n                            </li>\n                            <li className=\"list-group-item\">\n                                <strong>Year:</strong> {movie.Year}\n                            </li>\n                            <li className=\"list-group-item\">\n                                <strong>Released:</strong> {movie.Released}\n                            </li>\n                            <li className=\"list-group-item\">\n                                <strong>Runtime:</strong> {movie.Runtime}\n                            </li>\n                            <li className=\"list-group-item\">\n                                <strong>Language:</strong> {movie.Language}\n                            </li>\n                            <li className=\"list-group-item\">\n                                <strong>Country:</strong> {movie.Country}\n                            </li>\n                            <li className=\"list-group-item\">\n                                <strong>Rated:</strong> {movie.Rated}\n                            </li>\n                            <li className=\"list-group-item\">\n                                <strong>IMDB Rating:</strong> {movie.imdbRating}\n                            </li>\n                            <li className=\"list-group-item\">\n                                <strong>Director:</strong> {movie.Director}\n                            </li>\n                            <li className=\"list-group-item\">\n                                <strong>Writer:</strong> {movie.Writer}\n                            </li>\n                            <li className=\"list-group-item\">\n                                <strong>Actors:</strong> {movie.Actors}\n                            </li>\n                            <li className=\"list-group-item\">\n                                <strong>Production:</strong> {movie.Production}\n                            </li>\n                            <li className=\"list-group-item\">\n                                <strong>BoxOffice:</strong> {movie.BoxOffice}\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"card card-body bg-dark my-5 text-light \">\n                        <div className=\"col-md-12 d-flex justify-content-center\">\n\n                            <a\n                                href={'https://www.imdb.com/title/' + movie.imdbID}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                className=\"btn btn-primary\"\n                            >\n                                View on IMDB\n                           </a>\n                            <Link to=\"/\" className=\"btn btn-default text-light\">\n                                Go Back To Search\n                  </Link>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n\n        let content = loading ? <Spinner /> : movieInfo;\n        return <div>{content}</div>;\n    }\n}\n\nconst mapStateToProps = state => ({\n    loading: state.movies.loading,\n    movie: state.movies.movie\n})\n\nexport default connect(mapStateToProps, { fetchMovie, setLoading })(MovieSingle);\n","// state\nimport { SEARCH_MOVIE, FETCH_MOVIES, FETCH_MOVIE, SET_LOADING } from '../actions/types'\n\nconst initialState = {\n    text: '',\n    movies: [],\n    loading: false,\n    movie: []   // single movie \n}\n// data that is coming from the data\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SEARCH_MOVIE:\n            return {\n                ...state,\n                text: action.payload,\n                loading: false\n            };\n        case FETCH_MOVIES:\n            return {\n                ...state,\n                movies: action.payload,\n                loading: false\n            };\n        case FETCH_MOVIE:\n            return {\n                ...state,\n                movie: action.payload,\n                loading: false\n            };\n        case SET_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n        default:\n            return state;\n    }\n}\n\n","import { combineReducers } from 'redux';\nimport searchReducer from './search-reducer';\n\nexport default combineReducers({\n    movies: searchReducer    // it will contain all the search reducers states \n});\n\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n// import { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport rootReducer from './reducers';\nimport logger from 'redux-logger';\n\nconst middleware = [thunk];\nconst initialState = {};\n\nif (process.env.NODE_ENV === 'development') {\n    middleware.push(logger);\n}\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    (applyMiddleware(...middleware))\n);\n\nexport default store;","import React, { Component } from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';// to be able to connect react with redux we need to install react-redux\nimport { HashRouter as Router, Route } from 'react-router-dom';// it will perfectly when deploy to github pages \n\nimport Navbar from './components/layout/navbar/navBar.component';\nimport Footer from './components/layout/footer/footer.component';\nimport Landing from './components/homepage/landing.component';\nimport MovieSingle from './components/homepage/movie-single.component';\n\nimport store from './redux/store'; // to be able to connect react with redux we need to install react-redux \n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div>\n            <Navbar />\n            <Route exact path='/' component={Landing} />\n            <Route exact path='/movie/:id' component={MovieSingle} />\n            <Footer />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}